/*
    // RESERVED
    param 0 {
    }
*/

    // Speed coefficient (general)
    param 1 {
        coeff_speed_general {
            type: int;
            name: string(STR_PARAM_SPEED_GENERAL_NAME);
            desc: string(STR_PARAM_SPEED_GENERAL_DESC);
            min_value: 1;
            max_value: 100;
            def_value: 10;
        }
    }

    // Speed coefficient (sub-express)
    param 2 {
        coeff_speed_subexpress {
            type: int;
            name: string(STR_PARAM_SPEED_SUBEXPRESS_NAME);
            desc: string(STR_PARAM_SPEED_SUBEXPRESS_DESC);
            min_value: 1;
            max_value: 100;
            def_value: 10;
        }
    }

    // Speed coefficient (metro)
    param 3 {
        coeff_speed_metro {
            type: int;
            name: string(STR_PARAM_SPEED_METRO_NAME);
            desc: string(STR_PARAM_SPEED_METRO_DESC);
            min_value: 1;
            max_value: 100;
            def_value: 10;
        }
    }

    // Speed coefficient (Light rail)
    param 4 {
        coeff_speed_light_rail {
            type: int;
            name: string(STR_PARAM_SPEED_LIGHTRAIL1_NAME);
            desc: string(STR_PARAM_SPEED_LIGHTRAIL1_DESC);
            min_value: 1;
            max_value: 30;
            def_value: 10;
        }
    }

/*
    // RESERVED
    // Speed coefficient (accelation)
    param 5 {
        coeff_accelation {
            type: int;
            name: string(STR_PARAM_ACCELATION_NAME);
            desc: string(STR_PARAM_ACCELATION_DESC);
            min_value: 1;
            max_value: 30;
            def_value: 10;
        }
    }
//*/

    // Cost coefficient
    param 6 {
        coeff_cost_factor {
            type: int;
            name: string(STR_PARAM_FACTOR_COST_NAME);
            desc: string(STR_PARAM_FACTOR_COST_DESC);
            min_value: 0;
            max_value: 10;
            def_value: 3;
            names: {
                0: string(STR_PARAM_OPT_FACTOR_BY_1_8);
                1: string(STR_PARAM_OPT_FACTOR_BY_1_4);
                2: string(STR_PARAM_OPT_FACTOR_BY_1_2);
                3: string(STR_PARAM_OPT_FACTOR_BY_1_DEFAULT);
                4: string(STR_PARAM_OPT_FACTOR_BY_2);
                5: string(STR_PARAM_OPT_FACTOR_BY_4);
                6: string(STR_PARAM_OPT_FACTOR_BY_8);
                7: string(STR_PARAM_OPT_FACTOR_BY_16);
                8: string(STR_PARAM_OPT_FACTOR_BY_32);
                9: string(STR_PARAM_OPT_FACTOR_BY_64);
                10: string(STR_PARAM_OPT_FACTOR_BY_128);
            };
        }
    }

    // Running cost coefficient
    param 7 {
        coeff_running_cost_factor {
            type: int;
            name: string(STR_PARAM_FACTOR_RUNNING_COST_NAME);
            desc: string(STR_PARAM_FACTOR_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 12;
            def_value: 5;
            names: {
                0: string(STR_PARAM_OPT_FACTOR_BY_1_32);
                1: string(STR_PARAM_OPT_FACTOR_BY_1_16);
                2: string(STR_PARAM_OPT_FACTOR_BY_1_8);
                3: string(STR_PARAM_OPT_FACTOR_BY_1_4);
                4: string(STR_PARAM_OPT_FACTOR_BY_1_2);
                5: string(STR_PARAM_OPT_FACTOR_BY_1_DEFAULT);
                6: string(STR_PARAM_OPT_FACTOR_BY_2);
                7: string(STR_PARAM_OPT_FACTOR_BY_4);
                8: string(STR_PARAM_OPT_FACTOR_BY_8);
                9: string(STR_PARAM_OPT_FACTOR_BY_16);
                10: string(STR_PARAM_OPT_FACTOR_BY_32);
                11: string(STR_PARAM_OPT_FACTOR_BY_64);
                12: string(STR_PARAM_OPT_FACTOR_BY_128);
            };
        }
    }

    // Cargo capacity coefficient
    param 8 {
        coeff_cargo_capacity_factor {
            type: int;
            name: string(STR_PARAM_FACTOR_CARGO_CAPACITY_NAME);
            desc: string(STR_PARAM_FACTOR_CARGO_CAPACITY_DESC);
            min_value: 1;
            max_value: 8;
            def_value: 1;
            names: {
                1: string(STR_PARAM_OPT_FACTOR_BY_1_2_DEFAULT);
                2: string(STR_PARAM_OPT_FACTOR_BY_1);
                3: string(STR_PARAM_OPT_FACTOR_BY_2);
                4: string(STR_PARAM_OPT_FACTOR_BY_4);
                5: string(STR_PARAM_OPT_FACTOR_BY_8);
                6: string(STR_PARAM_OPT_FACTOR_BY_16);
                7: string(STR_PARAM_OPT_FACTOR_BY_32);
                8: string(STR_PARAM_OPT_FACTOR_BY_64);
            };
        }
    }

    // Loading speed coefficient
    param 9 {
        coeff_loading_speed_factor {
            type: int;
            name: string(STR_PARAM_FACTOR_LOADING_SPEED_NAME);
            desc: string(STR_PARAM_FACTOR_LOADING_SPEED_DESC);
            min_value: 0;
            max_value: 3;
            def_value: 0;
            names: {
                0: string(STR_PARAM_OPT_FACTOR_BY_1_DEFAULT);
                1: string(STR_PARAM_OPT_FACTOR_BY_2);
                2: string(STR_PARAM_OPT_FACTOR_BY_4);
                3: string(STR_PARAM_OPT_FACTOR_BY_8);
            };
        }
    }

    // Boolean
    param 10 {
        // Simple waypoint feature
        bool_simplize_waypoint {
            type: bool;
            name: string(STR_PARAM_SIMPLIZE_WAYPOINT_NAME);
            desc: string(STR_PARAM_SIMPLIZE_WAYPOINT_DESC);
            bit: 1;
            def_value: 1;
        }

        // Operating speed vs Max. design speed
        bool_use_max_design_speed {
            type: bool;
            name: string(STR_PARAM_USE_MAX_DESIGN_SPEED_NAME);
            desc: string(STR_PARAM_USE_MAX_DESIGN_SPEED_DESC);
            bit: 2;
            def_value: 0;
        }

        // No restictions vehicle attachment
        bool_no_vehicle_attachment_restrictions {
            type: bool;
            name: string(STR_PARAM_NO_VEHICLE_ATTACHMENT_RESTRICTIONS_NAME);
            desc: string(STR_PARAM_NO_VEHICLE_ATTACHMENT_RESTRICTIONS_DESC);
            bit: 3;
            def_value: 0;
        }

        // No restictions vehicle length
        bool_no_vehicle_attachment_length {
            type: bool;
            name: string(STR_PARAM_NO_VEHICLE_LENGTH_RESTRICTIONS_NAME);
            desc: string(STR_PARAM_NO_VEHICLE_LENGTH_RESTRICTIONS_DESC);
            bit: 4;
            def_value: 0;
        }

/*
        // RESERVED
        // Add prototype trains
        bool_add_prototype_trains {
            type: bool;
            name: string(STR_PARAM_ADD_PROTOTYPE_TRAINS_NAME);
            desc: string(STR_PARAM_ADD_PROTOTYPE_TRAINS_DESC);
            bit: 4;
            def_value: 1;
        }

        // RESERVED
        // Add ~~~ trains
        bool_add_~~~_trains {
            type: bool;
            name: string(STR_PARAM_ADD_PROTOTYPE_TRAINS_NAME);
            desc: string(STR_PARAM_ADD_PROTOTYPE_TRAINS_DESC);
            bit: 5;
            def_value: 1;
        }
*/
    }
