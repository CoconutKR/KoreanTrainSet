/*------------------------------------------------------------------------------
  한국 열차 세트(Korean Train Set)
  * Official download site : https://telk.kr/ottd/newgrf/ko_train_set
  * Github repository      : https://github.com/KoreanGRF/KoreanTrainSet
------------------------------------------------------------------------------*/

// Refit Paintings
// KTX-1's engine
switch(FEAT_TRAINS, SELF, sw_KTX1N_engine, position_in_consist_from_end == 0 && num_vehs_in_consist > 1) {
    1: set_KTX1N_engineT;
    set_KTX1N_engineH;
}

// KTX-Sancheon's engine
switch(FEAT_TRAINS, SELF, sw_KTX2N_engine, position_in_consist_from_end == 0 && num_vehs_in_consist > 1) {
    1: set_KTX2N_engineT;
    set_KTX2N_engineH;
}

// SRT's engine
switch(FEAT_TRAINS, SELF, sw_SRT_engine, position_in_consist_from_end == 0 && num_vehs_in_consist > 1) {
    1: set_SRT_engineT;
    set_SRT_engineH;
}

// Wagon
// KTX-1's wagon
switch(FEAT_TRAINS, SELF, sw_KTX1N_wagon_middle_front, cargo_subtype) {
    1: set_KTX1N_wagon_express;
    set_KTX1N_wagon_middle1;
}
switch(FEAT_TRAINS, SELF, sw_KTX1N_wagon_middle_rear, cargo_subtype) {
    1: set_KTX1N_wagon_express_r;
    set_KTX1N_wagon_middle2;
}
switch(FEAT_TRAINS, SELF, sw_KTX1N_wagon_middle, (position_in_vehid_chain + 1) <= (num_vehs_in_vehid_chain / 2)) {
    1: sw_KTX1N_wagon_middle_front;
    sw_KTX1N_wagon_middle_rear;
}
switch(FEAT_TRAINS, SELF, sw_KTX1N_wagon_rear, [STORE_TEMP(1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_KTX1N: set_KTX1N_wagon_18;
    return sw_KTX1N_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_KTX1N_wagon, [STORE_TEMP(-1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_KTX1N: set_KTX1N_wagon_1;
    return sw_KTX1N_wagon_rear;
}





// KTX-Sancheon's wagon
switch(FEAT_TRAINS, SELF, sw_KTX2N_wagon_middle_front, cargo_subtype) {
    1: set_KTX2N_wagon_express;
    set_KTX2N_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_KTX2N_wagon_middle_tail, cargo_subtype) {
    1: set_KTX2N_wagon_express_r;
    set_KTX2N_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_KTX2N_wagon_middle, (position_in_vehid_chain + 1) <= (num_vehs_in_vehid_chain / 2)) {
    1: sw_KTX2N_wagon_middle_front;
    sw_KTX2N_wagon_middle_tail;
}
switch(FEAT_TRAINS, SELF, sw_KTX2N_wagon_rear, [STORE_TEMP(1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_KTX2N: set_KTX2N_wagon_8;
    return sw_KTX2N_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_KTX2N_wagon, [STORE_TEMP(-1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_KTX2N: set_KTX2N_wagon_1;
    return sw_KTX2N_wagon_rear;
}

// SRT's wagon
switch(FEAT_TRAINS, SELF, sw_SRT_wagon_middle_front, cargo_subtype) {
    1: set_SRT_wagon_express;
    set_SRT_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_SRT_wagon_middle_tail, cargo_subtype) {
    1: set_SRT_wagon_express_r;
    set_SRT_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_SRT_wagon_middle, (position_in_vehid_chain + 1) <= (num_vehs_in_vehid_chain / 2)) {
    1: sw_SRT_wagon_middle_front;
    sw_SRT_wagon_middle_tail;
}
switch(FEAT_TRAINS, SELF, sw_SRT_wagon_rear, [STORE_TEMP(1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_SRT: set_SRT_wagon_8;
    return sw_SRT_wagon_middle;
}
switch(FEAT_TRAINS, SELF, sw_SRT_wagon, [STORE_TEMP(-1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]){
    ko_train_SRT: set_SRT_wagon_1;
    return sw_SRT_wagon_rear;
}

// Refit for wagon
switch(FEAT_TRAINS, SELF, sw_KTX_wagon_cargo_subtype_text, cargo_subtype) {
    1:    return string(STR_REFIT_PASSWAGON_FIRSTCAR);
    return string(STR_REFIT_PASSWAGON_NORMALCAR);
}
switch(FEAT_TRAINS, SELF, sw_KTX_wagon_capacity_general, cargo_subtype) {
    1: return 30 * sw_cargo_capacity_factor;
    sw_KTX_wagon_capacity;
}


// Attachable vehicles
switch(FEAT_TRAINS, SELF, sw_KTX_attach, vehicle_type_id) {
    ko_train_KTX1N:   return CB_RESULT_ATTACH_ALLOW;
    ko_train_KTX2N:   return CB_RESULT_ATTACH_ALLOW;
    ko_train_SRT:     return CB_RESULT_ATTACH_ALLOW;
    ko_train_PASSWG:  return CB_RESULT_ATTACH_ALLOW;
    ko_train_PASSWGP: return CB_RESULT_ATTACH_ALLOW;
    return string(STR_ERROR_NO_ATTACH);
}



// EUM's engine
switch(FEAT_TRAINS, SELF, sw_EUM_engine, position_in_consist_from_end == 0 && num_vehs_in_consist > 1) {
    1: set_EUM_engineT;
    set_EUM_engineH;
}

// EUM's wagon
switch(FEAT_TRAINS, SELF, sw_EUM_coach_by_free_tail, position_in_vehid_chain_from_end) {
    0: set_EUM_wagon_4;
    set_EUM_wagon_3;
}
switch(FEAT_TRAINS, SELF, sw_EUM_power_wagon, position_in_consist) {
    0: set_EUM_wagon_2;
    sw_EUM_coach_by_free_tail;
}

// EUM's capacity
switch(FEAT_TRAINS, SELF, var_EUM_capacity_express, 1) {
    return 46 * sw_cargo_capacity_factor;
}
switch(FEAT_TRAINS, SELF, var_EUM_capacity, 1) {
    return 76 * sw_cargo_capacity_factor;
}
switch(FEAT_TRAINS, SELF, sw_EUM_capacity_in_custom, position_in_consist) {
    0: return var_EUM_capacity_express;
    return var_EUM_capacity;
}

// Attachable vehicles for EUM
switch(FEAT_TRAINS, SELF, sw_EUM_attach, vehicle_type_id) {
    ko_train_EUM:     return CB_RESULT_ATTACH_ALLOW;
    ko_train_PASSWG:  return CB_RESULT_ATTACH_ALLOW;
    ko_train_PASSWGP: return CB_RESULT_ATTACH_ALLOW;
    return string(STR_ERROR_NO_ATTACH);
}


/*
[Note for myself]

https://newgrf-specs.tt-wiki.net/wiki/VariationalAction2/Vehicles#Query_variable_of_n-th_vehicle_in_chain_.2861.29
+1 : 뒤
0x10F : interpreted as a signed integer and specifies the offset in the chain from the current vehicle
0x61 : Query variable of n-th vehicle in chain
0 : shift
0x0000FFFF : mask
0xC6 : Vehicle type ID
*/
